/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type ApplianceObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type ApplianceParameters struct {

	// +kubebuilder:validation:Optional
	Labels map[string]*string `json:"labels,omitempty" tf:"labels,omitempty"`

	// +kubebuilder:validation:Required
	UID *string `json:"uid" tf:"uid,omitempty"`

	// +kubebuilder:validation:Optional
	Wait *bool `json:"wait,omitempty" tf:"wait,omitempty"`
}

// ApplianceSpec defines the desired state of Appliance
type ApplianceSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     ApplianceParameters `json:"forProvider"`
}

// ApplianceStatus defines the observed state of Appliance.
type ApplianceStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        ApplianceObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// Appliance is the Schema for the Appliances API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,palettejet}
type Appliance struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              ApplianceSpec   `json:"spec"`
	Status            ApplianceStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// ApplianceList contains a list of Appliances
type ApplianceList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Appliance `json:"items"`
}

// Repository type metadata.
var (
	Appliance_Kind             = "Appliance"
	Appliance_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: Appliance_Kind}.String()
	Appliance_KindAPIVersion   = Appliance_Kind + "." + CRDGroupVersion.String()
	Appliance_GroupVersionKind = CRDGroupVersion.WithKind(Appliance_Kind)
)

func init() {
	SchemeBuilder.Register(&Appliance{}, &ApplianceList{})
}
