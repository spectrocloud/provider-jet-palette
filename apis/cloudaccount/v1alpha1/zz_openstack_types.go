/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type OpenstackObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type OpenstackParameters struct {

	// +kubebuilder:validation:Optional
	CACertificate *string `json:"caCertificate,omitempty" tf:"ca_certificate,omitempty"`

	// +kubebuilder:validation:Required
	DefaultDomain *string `json:"defaultDomain" tf:"default_domain,omitempty"`

	// +kubebuilder:validation:Required
	DefaultProject *string `json:"defaultProject" tf:"default_project,omitempty"`

	// +kubebuilder:validation:Required
	IdentityEndpoint *string `json:"identityEndpoint" tf:"identity_endpoint,omitempty"`

	// +kubebuilder:validation:Optional
	OpenstackAllowInsecure *bool `json:"openstackAllowInsecure,omitempty" tf:"openstack_allow_insecure,omitempty"`

	// +kubebuilder:validation:Required
	OpenstackPasswordSecretRef v1.SecretKeySelector `json:"openstackPasswordSecretRef" tf:"-"`

	// +kubebuilder:validation:Required
	OpenstackUsername *string `json:"openstackUsername" tf:"openstack_username,omitempty"`

	// +kubebuilder:validation:Required
	ParentRegion *string `json:"parentRegion" tf:"parent_region,omitempty"`

	// +kubebuilder:validation:Required
	PrivateCloudGatewayID *string `json:"privateCloudGatewayId" tf:"private_cloud_gateway_id,omitempty"`
}

// OpenstackSpec defines the desired state of Openstack
type OpenstackSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     OpenstackParameters `json:"forProvider"`
}

// OpenstackStatus defines the observed state of Openstack.
type OpenstackStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        OpenstackObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// Openstack is the Schema for the Openstacks API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,palettejet}
type Openstack struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              OpenstackSpec   `json:"spec"`
	Status            OpenstackStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// OpenstackList contains a list of Openstacks
type OpenstackList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Openstack `json:"items"`
}

// Repository type metadata.
var (
	Openstack_Kind             = "Openstack"
	Openstack_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: Openstack_Kind}.String()
	Openstack_KindAPIVersion   = Openstack_Kind + "." + CRDGroupVersion.String()
	Openstack_GroupVersionKind = CRDGroupVersion.WithKind(Openstack_Kind)
)

func init() {
	SchemeBuilder.Register(&Openstack{}, &OpenstackList{})
}
