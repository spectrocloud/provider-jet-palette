/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type TencentObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type TencentParameters struct {

	// +kubebuilder:validation:Optional
	TencentSecretID *string `json:"tencentSecretId,omitempty" tf:"tencent_secret_id,omitempty"`

	// +kubebuilder:validation:Optional
	TencentSecretKeySecretRef *v1.SecretKeySelector `json:"tencentSecretKeySecretRef,omitempty" tf:"-"`
}

// TencentSpec defines the desired state of Tencent
type TencentSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     TencentParameters `json:"forProvider"`
}

// TencentStatus defines the observed state of Tencent.
type TencentStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        TencentObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// Tencent is the Schema for the Tencents API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,palettejet}
type Tencent struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              TencentSpec   `json:"spec"`
	Status            TencentStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// TencentList contains a list of Tencents
type TencentList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Tencent `json:"items"`
}

// Repository type metadata.
var (
	Tencent_Kind             = "Tencent"
	Tencent_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: Tencent_Kind}.String()
	Tencent_KindAPIVersion   = Tencent_Kind + "." + CRDGroupVersion.String()
	Tencent_GroupVersionKind = CRDGroupVersion.WithKind(Tencent_Kind)
)

func init() {
	SchemeBuilder.Register(&Tencent{}, &TencentList{})
}
